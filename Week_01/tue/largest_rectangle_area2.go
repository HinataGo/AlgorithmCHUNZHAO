package tue

// 单调栈
// 向右扫描， 遇到右边比自己小的就暂停，之前不断压入栈，
// 然后 开始栈弹出 进行计算，
// 假设这里abc 递增 突然d 小了， 那么开始计算 c最大很显然就是c 自己乘以宽度 ，
// 随后下一步，看b 和 d 大小相比， b < d 继续压栈 || b>d 继续弹出b 计算值
// 注意这里每次计算后都与 res 比较 取max
// （并且弹出时 需要一个 cout  计算弹出的元素个数，
// 直到当前元素不弹出进行计算时 cout及时有多少个自己用来计算max）
// 当栈非空时 并且压栈时，记得补充上自己的之前查看的栈顶元素数据（可以值存入n个自己，毕竟后面的不会超过自己大小）
// 这样最后直到栈为空， 求出的max 为最终结果

// TODO 实践有困难
// func largestRectangleArea2(heights []int) int {
//
//
// }
