package Week_05

// 190. 颠倒二进制位,其实就是从头到尾数字 反转一下
// 循环32次，每次获取最后一位,也就是n&1，与结果（初始为0）相或（res=n&1|res），再将n右移，结果左移。 最终的结果就是反转的数了。
/*
开始 ：res：00000000   n:00001010     n&1
    1：res：00000000  n:00001010       0
    2：res：00000001  n:00000101       1
    3：res：00000010  n:00000010       0
    4：res：00000101  n:00000001       1
    5：res：00001010  n:00000000       0
    6：res：00010100  n:00000000       0
    7：res：00101000  n:00000000       0
    8：res：01010000  n:00000000       0
*/
func reverseBits(num uint32) uint32 {
	var res uint32 = 0
	for i := 0; i < 32; i++ {
		res <<= 1
		res |= num & 1
		num >>= 1
	}
	return res
}
